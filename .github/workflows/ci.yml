name: CI

on:
  workflow_dispatch:
  pull_request:
    branches: [master, main]

jobs:
  deploy:
    runs-on: self-hosted
    
    permissions:
      contents: write
      pull-requests: write
      checks: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build with Nix
        run: |
          echo "Building test-app..."
          nix build .#test-app
          echo "Store path: $(readlink result)"
      
      - name: Deploy to production
        if: success()
        run: |
          # Use StateDirectory for consistent builds (writable by runner)
          BUILD_DIR="/var/lib/github-runner/test-app-runner/builds"
          echo "Using build directory: $BUILD_DIR"
          mkdir -p "$BUILD_DIR"
          
          # Get git commit before changing directory
          export GIT_COMMIT=$(git rev-parse --short HEAD)
          
          # Clean and sync to build directory
          echo "Syncing to build directory..."
          rm -rf "$BUILD_DIR"/*
          rm -rf "$BUILD_DIR"/.??* 2>/dev/null || true
          rsync -av --exclude='node_modules' --exclude='result' --exclude='.git' . "$BUILD_DIR"/
          cd "$BUILD_DIR"
          
          # Touch flake.nix to bust nix cache for upgrades
          touch flake.nix
          
          # Install dependencies (if package.json exists)
          if [ -f "package.json" ]; then
            echo "Installing dependencies with bun..."
            bun install --frozen-lockfile
          fi
          
          # Build and install from consistent location
          echo "Building and updating nix profile..."
          echo "Building version: $GIT_COMMIT"
          
          # Debug: Check current profile before changes
          echo "=== Current nix profile before update ==="
          echo "User: $(whoami)"
          echo "HOME: $HOME"
          
          # CRITICAL: Use a profile the runner owns and can write to
          # Runner can't write to /home/justin, so use StateDirectory
          RUNNER_PROFILE="/var/lib/github-runner/test-app-runner/profile"
          echo "Using runner-owned profile: $RUNNER_PROFILE"
          
          # Ensure profile directory exists and is writable
          mkdir -p "$(dirname $RUNNER_PROFILE)"
          
          # Build the package
          echo "=== Building package ==="
          nix build .#test-app --print-out-paths
          STORE_PATH=$(readlink -f result)
          echo "Built store path: $STORE_PATH"
          
          # Try to upgrade or install
          echo "=== Attempting profile update ===="
          
          # Check current profile
          echo "Current profile contents:"
          nix profile list --profile "$RUNNER_PROFILE" | grep test-app || echo "No test-app in profile"
          
          # Update runner's profile
          if nix profile list --profile "$RUNNER_PROFILE" 2>/dev/null | grep -E 'test-app' > /dev/null; then
            echo 'test-app found in profile, attempting upgrade...'
            nix profile upgrade --profile "$RUNNER_PROFILE" test-app || {
              echo '⚠️ Upgrade failed, removing and reinstalling...'
              nix profile remove --profile "$RUNNER_PROFILE" test-app
              nix profile install --profile "$RUNNER_PROFILE" .#test-app
            }
          else
            echo 'test-app not in profile, installing fresh...'
            nix profile install --profile "$RUNNER_PROFILE" .#test-app
          fi
          
          echo '=== Profile after update ==='
          nix profile list --profile "$RUNNER_PROFILE" | grep test-app || echo '❌ No test-app in profile!'
          
          # CRITICAL ASSERTION: Verify the profile actually updated
          echo "=== VERIFYING PROFILE UPDATE ==="
          
          # Check profile to ensure test-app is there
          if ! nix profile list --profile "$RUNNER_PROFILE" | grep -q test-app; then
            echo "❌ CRITICAL ERROR: test-app not found in runner profile!"
            nix profile list --profile "$RUNNER_PROFILE"
            exit 1
          fi
          
          echo "✅ test-app installed in runner's profile"
          echo "Binary location: $RUNNER_PROFILE/bin/test-app"
          
          # Create symlink in a place we can write to
          echo "Creating symlink for systemd service..."
          SYMLINK_DIR="/var/lib/github-runner/test-app-runner/bin"
          mkdir -p "$SYMLINK_DIR"
          ln -sf "$RUNNER_PROFILE/bin/test-app" "$SYMLINK_DIR/test-app"
          echo "Symlink created: $SYMLINK_DIR/test-app -> $RUNNER_PROFILE/bin/test-app"
          
          # The systemd service needs to be updated to use this path
          echo "NOTE: systemd service still expects /home/justin/.nix-profile/bin/test-app"
          echo "You need to update test-app.nix to use $SYMLINK_DIR/test-app"
          
          echo "✅ Profile successfully updated!"
          
          # Debug: Check what binary is actually being used
          echo "=== Which test-app is in PATH ==="
          which test-app || echo "test-app not in PATH"
          ls -la $(which test-app) 2>/dev/null || true
          
          # Debug: Check systemd service configuration
          echo "=== Systemd service configuration ==="
          systemctl cat test-app || true
          
          # Restart using polkit (already working)
          echo "Restarting service using polkit..."
          systemctl restart test-app
          
          echo "Checking service status..."
          systemctl status test-app --no-pager || true
          
          # Debug: Check what's actually running
          echo "=== Process info ==="
          ps aux | grep test-app | grep -v grep || true
          
          echo "Testing endpoint..."
          sleep 2
          EMOJI=$(curl -s http://localhost:3001 | grep -o "emoji.*</div>" | head -1)
          echo "Current emoji: $EMOJI"
          
          # Verify deployment succeeded
          if [[ -z "$EMOJI" ]]; then
            echo "Failed to fetch page!"
            exit 1
          fi
      
      - name: Auto-merge PR
        if: |
          success() && 
          github.event_name == 'pull_request' && 
          github.event.pull_request.user.login == github.repository_owner
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "All tests and deployment passed! Merging PR #${{ github.event.pull_request.number }}"
          gh pr merge ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --squash \
            --delete-branch