name: CI

on:
  workflow_dispatch:
  pull_request:
    branches: [master, main]

jobs:
  deploy:
    runs-on: self-hosted
    
    permissions:
      contents: write
      pull-requests: write
      checks: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build with Nix
        run: |
          echo "Building test-app..."
          nix build .#test-app
          echo "Store path: $(readlink result)"
      
      - name: Deploy to production
        if: success()
        run: |
          # Use StateDirectory for consistent builds (writable by runner)
          BUILD_DIR="/var/lib/github-runner/test-app-runner/builds"
          echo "Using build directory: $BUILD_DIR"
          mkdir -p "$BUILD_DIR"
          
          # Clean and sync to build directory
          echo "Syncing to build directory..."
          rm -rf "$BUILD_DIR"/*
          rm -rf "$BUILD_DIR"/.??* 2>/dev/null || true
          rsync -av --exclude='.git' --exclude='node_modules' --exclude='result' . "$BUILD_DIR"/
          cd "$BUILD_DIR"
          
          # Build and install from consistent location
          echo "Building and updating nix profile..."
          export GIT_COMMIT=$(git rev-parse --short HEAD)
          echo "Building version: $GIT_COMMIT"
          nix build .#test-app
          nix profile remove test-app 2>/dev/null || true
          nix profile install .#test-app
          
          # Restart using polkit (already working)
          echo "Restarting service using polkit..."
          systemctl restart test-app
          
          echo "Checking service status..."
          systemctl status test-app --no-pager || true
          
          echo "Testing endpoint..."
          sleep 2
          EMOJI=$(curl -s http://localhost:3001 | grep -o "emoji.*</div>" | head -1)
          echo "Current emoji: $EMOJI"
          
          # Verify deployment succeeded
          if [[ -z "$EMOJI" ]]; then
            echo "Failed to fetch page!"
            exit 1
          fi
      
      - name: Auto-merge PR
        if: |
          success() && 
          github.event_name == 'pull_request' && 
          github.event.pull_request.user.login == github.repository_owner
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "All tests and deployment passed! Merging PR #${{ github.event.pull_request.number }}"
          gh pr merge ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --squash \
            --delete-branch